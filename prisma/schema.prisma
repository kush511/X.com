generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id
  email        String  @unique
  username     String  @unique
  displayName  String
  bio          String?
  location     String?
  job          String?
  website      String?
  avatar       String?
  coverPicture String?

  posts     Post[] // One-to-many: user can have many posts
  likes     Like[]
  saves     Save[]
  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  createdAt DateTime @default(now())
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  video       String?
  isSensitive Boolean  @default(false)

  likes Like[]
  saves Save[]

  //Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@unique([userId, postId]) // one like per user per post
}

model Save {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // one like per user per post
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("Followers", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])
}
